{
  "version": 3,
  "sources": [
    "assets/spinner.gif",
    "utils/auth.js",
    "components/Nav/index.js",
    "utils/helpers.js",
    "components/ProductItem/index.js",
    "utils/actions.js",
    "utils/queries.js",
    "components/ProductList/index.js",
    "components/CategoryMenu/index.js",
    "components/CartItem/index.js",
    "components/Cart/index.js",
    "pages/Home.js",
    "pages/Detail.js",
    "components/Jumbotron/index.js",
    "pages/NoMatch.js",
    "utils/mutations.js",
    "pages/Login.js",
    "pages/Signup.js",
    "pages/OrderHistory.js",
    "pages/Success.js",
    "utils/reducers.js",
    "utils/store.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "module",
    "exports",
    "decode",
    "this",
    "getToken",
    "token",
    "isTokenExpired",
    "exp",
    "Date",
    "now",
    "err",
    "localStorage",
    "getItem",
    "idToken",
    "setItem",
    "window",
    "location",
    "assign",
    "removeItem",
    "Nav",
    "className",
    "to",
    "role",
    "aria-label",
    "Auth",
    "loggedIn",
    "href",
    "onClick",
    "logout",
    "idbPromise",
    "storeName",
    "method",
    "object",
    "Promise",
    "resolve",
    "reject",
    "db",
    "tx",
    "store",
    "request",
    "indexedDB",
    "open",
    "onupgradeneeded",
    "e",
    "result",
    "createObjectStore",
    "keyPath",
    "onerror",
    "console",
    "log",
    "onsuccess",
    "transaction",
    "objectStore",
    "put",
    "all",
    "getAll",
    "delete",
    "_id",
    "oncomplete",
    "close",
    "ProductItem",
    "item",
    "image",
    "name",
    "price",
    "quantity",
    "dispatch",
    "useDispatch",
    "cart",
    "useSelector",
    "state",
    "alt",
    "src",
    "count",
    "pluralize",
    "itemInCart",
    "find",
    "cartItem",
    "type",
    "purchaseQuantity",
    "parseInt",
    "product",
    "QUERY_PRODUCTS",
    "gql",
    "QUERY_CATEGORIES",
    "QUERY_USER",
    "ProductList",
    "currentCategory",
    "useQuery",
    "loading",
    "data",
    "useEffect",
    "products",
    "forEach",
    "then",
    "length",
    "filter",
    "category",
    "map",
    "key",
    "spinner",
    "CategoryMenu",
    "categories",
    "categoryData",
    "id",
    "CartItem",
    "placeholder",
    "value",
    "onChange",
    "target",
    "removeFromCart",
    "stripePromise",
    "loadStripe",
    "Cart",
    "cartOpen",
    "useLazyQuery",
    "getCheckout",
    "toggleCart",
    "a",
    "getCart",
    "res",
    "redirectToCheckout",
    "sessionId",
    "checkout",
    "session",
    "sum",
    "toFixed",
    "calculateTotal",
    "productIds",
    "i",
    "push",
    "variables",
    "Home",
    "Detail",
    "useParams",
    "useState",
    "currentProduct",
    "setCurrentProduct",
    "indexedProducts",
    "description",
    "disabled",
    "p",
    "Jumbotron",
    "children",
    "style",
    "height",
    "clear",
    "paddingTop",
    "textAlign",
    "NoMatch",
    "LOGIN",
    "ADD_ORDER",
    "ADD_USER",
    "Login",
    "props",
    "email",
    "password",
    "formState",
    "setFormState",
    "useMutation",
    "login",
    "error",
    "handleFormSubmit",
    "event",
    "preventDefault",
    "mutationResponse",
    "handleChange",
    "onSubmit",
    "htmlFor",
    "Signup",
    "addUser",
    "firstName",
    "lastName",
    "OrderHistory",
    "user",
    "orders",
    "order",
    "purchaseDate",
    "toLocaleDateString",
    "index",
    "Success",
    "addOrder",
    "saveOrder",
    "setTimeout",
    "alert",
    "initialState",
    "reducer",
    "action",
    "newState",
    "createStore",
    "client",
    "ApolloClient",
    "operation",
    "setContext",
    "headers",
    "authorization",
    "uri",
    "App",
    "exact",
    "path",
    "component",
    "isLocalhost",
    "Boolean",
    "hostname",
    "match",
    "registerValidSW",
    "swUrl",
    "config",
    "navigator",
    "serviceWorker",
    "register",
    "registration",
    "onupdatefound",
    "installingWorker",
    "installing",
    "onstatechange",
    "controller",
    "onUpdate",
    "onSuccess",
    "catch",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById",
    "URL",
    "process",
    "origin",
    "addEventListener",
    "fetch",
    "response",
    "contentType",
    "get",
    "status",
    "indexOf",
    "ready",
    "unregister",
    "reload",
    "checkValidServiceWorker"
  ],
  "mappings": "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",
  "file": "static/js/main.96ab1bf1.chunk.js",
  "sourcesContent": [
    "module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";",
    "import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n",
    "import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n",
    "export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    //open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    //create variables to hold references to the database, transaction(tx), and object store\n    let db, tx, store;\n\n    //if version has changed(or this is the first time using the the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n\n      //create object store for each type of data and set \"primary\" key index to be the '_id' of the data\n      db.createObjectStore('products', {keyPath: '_id'});\n      db.createObjectStore('categories', {keyPath: '_id'});\n      db.createObjectStore('cart', {keyPath: '_id'});\n    };\n\n    //handle any errors with connection\n    request.onerror = function(e) {\n      console.log('There was an error');\n    }\n\n    // on database open success\n    request.onsuccess = function(e) {\n      //save a reference of the database to the 'db' variable\n      db = request.result;\n      //open a transaction do whatever we pass into 'storeName' (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      //save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      //if there are any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      }\n\n      switch(method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result)\n          };\n          break;\n\n        case 'delete': \n          store.delete(object._id);\n          break;\n\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      //when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      }\n\n    }\n\n  })\n\n}",
    "import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { pluralize } from \"../../utils/helpers\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const { image, name, _id, price, quantity } = item;\n\n  const dispatch = useDispatch();\n  const cart = useSelector((state) => state.cart);\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE for purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize(\"item\", quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n",
    "export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';",
    "import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n",
    "import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from \"../../assets/spinner.gif\";\n\nfunction ProductList() {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      // save to indexedDB\n      data.products.forEach((product) => {\n        idbPromise(\"products\", \"put\", product);\n      });\n    } else if (!loading) {\n      // if offline, get data from 'products' store\n      idbPromise(\"products\", \"get\").then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n",
    "import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const categories = useSelector((state) => state.categories);\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      // execute dispatch function with action object indicating the type of action and data to set for category state\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n\n      // categoryData.categories.forEach((category) => {\n      //   idbPromise(\"categories\", \"put\", category);\n      // });\n    } else if (!loading) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      // idbPromise(\"categories\", \"get\").then((categories) => {\n\n      // });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n",
    "import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const removeFromCart = (item) => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id,\n    });\n\n    idbPromise(\"cart\", \"delete\", { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === \"0\") {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id,\n      });\n\n      idbPromise(\"cart\", \"delete\", { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value),\n      });\n\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        {item.name}, ${item.price}\n      </div>\n      <div>\n        <span>Qty:</span>\n        <input\n          type=\"number\"\n          placeholder=\"1\"\n          value={item.purchaseQuantity}\n          onChange={onChange}\n        />\n        <span\n          role=\"img\"\n          aria-label=\"trash\"\n          onClick={() => removeFromCart(item)}\n        >\n          🗑️\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n",
    "import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\n\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\n\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\n// import { QUERY_CHECKOUT } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport \"./style.css\";\n\nconst stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const cart = useSelector((state) => state.cart);\n  const cartOpen = useSelector((state) => state.cartOpen);\n\n  const [getCheckout, { data }] = useLazyQuery();\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise(\"cart\", \"get\");\n      dispatch({\n        type: ADD_MULTIPLE_TO_CART,\n        products: [...cart],\n      });\n    }\n\n    if (!cart.length) {\n      getCart();\n    }\n  }, [cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function calculateTotal() {\n    let sum = 0;\n    cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"cart\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      <div>\n        {cart.length ? (\n          <div>\n            {cart.map((item) => (\n              <CartItem key={item._id} item={item} />\n            ))}\n            <div className=\"flex-row space-between\">\n              <strong>Total: ${calculateTotal()}</strong>\n              {Auth.loggedIn() ? (\n                <button onClick={submitCheckout}>Checkout</button>\n              ) : (\n                <span>(log in to check out)</span>\n              )}\n            </div>\n          </div>\n        ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n            </span>\n            You haven't added anything to your cart yet!\n          </h3>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;\n",
    "import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;",
    "import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\nimport { useDispatch, useSelector } from 'react-redux';\nimport Cart from '../components/Cart';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { idbPromise } from '../utils/helpers';\n\n\nfunction Detail() {\n\n\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n\n\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to cart\n            </button>\n\n            <button \n            disabled={!cart.find(p => p._id === currentProduct._id)} \n            onClick={removeFromCart}\n          >\n            Remove from Cart\n          </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;",
    "import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n",
    "import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n",
    "import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n",
    "import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;",
    "import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;",
    "import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;",
    "import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\n\r\n\r\nfunction Success() {\r\n\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n    useEffect(() => {\r\n    async function saveOrder() {\r\n\r\n        const cart = await idbPromise('cart', 'get');\r\n        const products = cart.map(item => item._id);\r\n\r\n        if (products.length) {\r\n            const { data } = await addOrder({ variables: { products } });\r\n            const productData = data.addOrder.products;\r\n          \r\n            productData.forEach((item) => {\r\n              idbPromise('cart', 'delete', item);\r\n            });\r\n          }\r\n\r\n    }\r\n\r\n    saveOrder();\r\n\r\n\r\n    }, [addOrder]);\r\n\r\n    setTimeout(function(){ alert(\"\"); }, 3000);\r\n    window.location.assign('/')\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Jumbotron>\r\n          <h1>Success!</h1>\r\n          <h2>\r\n            Thank you for your purchase!\r\n          </h2>\r\n          <h2>\r\n            You will now be redirected to the homepage\r\n          </h2>\r\n        </Jumbotron>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Success;",
    "import { useReducer } from \"react\";\n\nimport {\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  CLEAR_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  UPDATE_PRODUCTS,\n  TOGGLE_CART,\n} from \"./actions\";\n\nconst initialState = {\n  cart: [],\n  cartOpen: false,\n  products: [],\n  categories: [],\n  currentCategory: \"\",\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // if check action.type and, return a new state object with an appropriately updated products array\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n    // else do not update state\n    default:\n      return state;\n  }\n};\n\n// export function useProductReducer(initialState) {\n//     return useReducer(reducer, initialState);\n// };\n\nexport default reducer;\n",
    "import { createStore } from \"redux\";\nimport reducer from \"./reducers\";\n\nconst store = createStore(reducer);\n\nexport default store;\n",
    "import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport { Provider } from \"react-redux\";\n\nimport Nav from \"./components/Nav\";\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport Success from \"./pages/Success\";\n\nimport store from \"./utils/store\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"
  ],
  "sourceRoot": ""
}
